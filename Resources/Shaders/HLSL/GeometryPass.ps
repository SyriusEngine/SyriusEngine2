struct VS_OUT{
    float4 position: SV_Position;
    float3 cameraPos: CameraPos;
    float2 texCoords: TexCoords;
    matrix<float, 3, 3> TBN: TBNMatrix;
};

struct PS_OUT{
    float4 gPositions : SV_TARGET0;
    float4 gNormals : SV_TARGET1;
    float4 gAlbedo : SV_TARGET2;
    float4 gMrao : SV_TARGET3;
};

SamplerState splr: register(s0);

Texture2D albedo: register(t0);
Texture2D normalTex: register(t1);
Texture2D metallicTex: register(t2);
Texture2D roughnessTex: register(t3);
Texture2D aoTex: register(t4);

PS_OUT main(VS_OUT vsOutput){
    float2 texCoords = vsOutput.texCoords;
    texCoords.y = 1.0f - texCoords.y;

    float4 color = albedo.Sample(splr, texCoords);
    float3 normal = normalize(2.0f * normalTex.Sample(splr, texCoords).xyz - 1.0f);
    float3 N = normalize(mul(normal, vsOutput.TBN));

    float metallic = metallicTex.Sample(splr, texCoords).x;
    float roughness = roughnessTex.Sample(splr, texCoords).x;
    float ao = aoTex.Sample(splr, texCoords).x;

    PS_OUT output;
    output.gPositions = vsOutput.position;
    output.gNormals = float4(N, 0.0f);
    output.gAlbedo = color;
    output.gMrao = float4(metallic, roughness, ao, 0.0f);

    return output;
}
